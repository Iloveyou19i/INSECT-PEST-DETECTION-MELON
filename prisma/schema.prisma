datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  profileImg    String
  role          Role      @default(user)
  outputs       Output[]
  pests         Pest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  user
  admin
}

model Output {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  image      String
  time       Float
  detections Detection[]
  userId     String?     @db.ObjectId
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Detection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  confidence Float
  class      String
  classId    Int
  output     Output?  @relation(fields: [outputId], references: [id], onDelete: Cascade)
  outputId   String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Pest {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  description String?
  pictures    PestPictures[]
  author      String?        @db.ObjectId
  user        User?          @relation(fields: [author], references: [id], onDelete: Cascade)
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PestPictures {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pestId    String?  @db.ObjectId
  pest      Pest?    @relation(fields: [pestId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
