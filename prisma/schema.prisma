datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String      @unique
  emailVerified DateTime?
  password      String
  profileImg    String
  role          Role        @default(user)
  outputs       Output[]
  detections    Detection[]
  pests         Pest[]
  logs          UserLogs[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserLogs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  description String
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Output {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  image      String
  time       Float
  detections Detection[]
  userId     String?     @db.ObjectId
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Detection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @db.ObjectId
  confidence Float
  class      String
  classId    Int
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  output     Output?  @relation(fields: [outputId], references: [id], onDelete: Cascade)
  outputId   String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Pest {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String            @unique
  class_name  String?           @unique
  description String?
  pictures    PestPictures[]
  treatments  PestTreatments[]
  preventions PestPreventions[]
  faqs        PestFAQs[]
  author      String?           @db.ObjectId
  user        User?             @relation(fields: [author], references: [id], onDelete: Cascade)
  isPublished Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model PestPictures {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pestId    String?  @db.ObjectId
  imageUrl  String
  pest      Pest?    @relation(fields: [pestId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PestTreatments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pestId    String?  @db.ObjectId
  treatment String
  pest      Pest?    @relation(fields: [pestId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PestPreventions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  pestId     String?  @db.ObjectId
  prevention String
  pest       Pest?    @relation(fields: [pestId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PestFAQs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pestId    String?  @db.ObjectId
  question  String
  answer    String
  pest      Pest?    @relation(fields: [pestId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
